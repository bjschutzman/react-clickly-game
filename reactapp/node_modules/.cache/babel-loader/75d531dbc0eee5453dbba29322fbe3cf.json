{"ast":null,"code":"var _jsxFileName = \"/Users/brianschutzman/react-clickly-game/reactapp/src/App.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\nimport \"./index.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards,\n      score: 0,\n      highscore: 0\n    };\n\n    this.gameOver = () => {\n      if (this.state.score >= this.state.highscore) {\n        this.setState({\n          highscore: this.state.score\n        }, function () {\n          console.log(this.state.highscore);\n        });\n      } else {\n        alert(\"Game over! \\n  Your score is \".concat(this.state.score));\n        this.setState({\n          score: 0\n        });\n        return true;\n      }\n    };\n\n    this.clickCount = id => {\n      this.state.cards.find((o, i) => {\n        if (o.id === id) {\n          if (cards[i].count === 0) {\n            cards[i].count = cards[i].count + 1;\n            this.setState({\n              score: this.state.score + 1\n            }, function () {\n              console.log(this.state.score);\n            });\n            this.state.cards.sort(() => Math.random() - 0.5);\n            return true;\n          } else {\n            this.gameOver();\n          }\n        }\n      });\n    };\n  }\n\n  // Map over this.state.cards and render a cardCard component for each card object\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Header, {\n      score: this.state.score,\n      highscore: this.state.highscore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Clicky Game\"), this.state.cards.map(card => React.createElement(Card, {\n      clickCount: this.clickCount,\n      id: card.id,\n      key: card.id,\n      image: card.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/brianschutzman/react-clickly-game/reactapp/src/App.js"],"names":["React","Component","Card","Wrapper","Header","cards","App","state","score","highscore","gameOver","setState","console","log","alert","clickCount","id","find","o","i","count","sort","Math","random","render","map","card","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAO,aAAP;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAExBM,KAFwB,GAEhB;AACJF,MAAAA,KADI;AAEJG,MAAAA,KAAK,EAAE,CAFH;AAGJC,MAAAA,SAAS,EAAE;AAHP,KAFgB;;AAAA,SAQxBC,QARwB,GAQb,MAAM;AACb,UAAI,KAAKH,KAAL,CAAWC,KAAX,IAAoB,KAAKD,KAAL,CAAWE,SAAnC,EAA6C;AACzC,aAAKE,QAAL,CAAc;AAACF,UAAAA,SAAS,EAAG,KAAKF,KAAL,CAAWC;AAAxB,SAAd,EAA8C,YAAU;AACpDI,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWE,SAAvB;AACH,SAFD;AAGH,OAJD,MAIM;AACFK,QAAAA,KAAK,wCAAiC,KAAKP,KAAL,CAAWC,KAA5C,EAAL;AACA,aAAKG,QAAL,CAAc;AAACH,UAAAA,KAAK,EAAE;AAAR,SAAd;AACA,eAAO,IAAP;AACH;AACJ,KAlBuB;;AAAA,SAsB5BO,UAtB4B,GAsBfC,EAAE,IAAI;AACf,WAAKT,KAAL,CAAWF,KAAX,CAAiBY,IAAjB,CAAsB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC9B,YAAID,CAAC,CAACF,EAAF,KAASA,EAAb,EAAiB;AACf,cAAGX,KAAK,CAACc,CAAD,CAAL,CAASC,KAAT,KAAmB,CAAtB,EAAwB;AACtBf,YAAAA,KAAK,CAACc,CAAD,CAAL,CAASC,KAAT,GAAiBf,KAAK,CAACc,CAAD,CAAL,CAASC,KAAT,GAAiB,CAAlC;AACA,iBAAKT,QAAL,CAAc;AAACH,cAAAA,KAAK,EAAG,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,aAAd,EAA8C,YAAU;AACtDI,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWC,KAAvB;AACD,aAFD;AAGA,iBAAKD,KAAL,CAAWF,KAAX,CAAiBgB,IAAjB,CAAsB,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAA5C;AACA,mBAAO,IAAP;AACD,WAPD,MAOO;AACL,iBAAKb,QAAL;AACD;AACF;AACF,OAbD;AAcD,KArCyB;AAAA;;AAuCZ;AACAc,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWC,KAA1B;AAAiC,MAAA,SAAS,EAAE,KAAKD,KAAL,CAAWE,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEK,KAAKF,KAAL,CAAWF,KAAX,CAAiBoB,GAAjB,CAAqBC,IAAI,IACtB,oBAAC,IAAD;AACI,MAAA,UAAU,EAAE,KAAKX,UADrB;AAEI,MAAA,EAAE,EAAEW,IAAI,CAACV,EAFb;AAGI,MAAA,GAAG,EAAEU,IAAI,CAACV,EAHd;AAII,MAAA,KAAK,EAAEU,IAAI,CAACC,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAFL,CADJ;AAaH;;AAtDW;;AAyDhB,eAAerB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\nimport \"./index.css\";\n\nclass App extends Component {\n    // Setting this.state.cards to the cards json array\n    state = {\n        cards,\n        score: 0,\n        highscore: 0\n    };\n\n    gameOver = () => {\n        if (this.state.score >= this.state.highscore){\n            this.setState({highscore : this.state.score}, function(){\n                console.log(this.state.highscore)\n            });\n        }else {\n            alert(`Game over! \\n  Your score is ${this.state.score}` );\n            this.setState({score: 0});\n            return true;\n        }\n    }\n\n\n  \nclickCount = id => {\n    this.state.cards.find((o, i) => {\n      if (o.id === id) {\n        if(cards[i].count === 0){\n          cards[i].count = cards[i].count + 1;\n          this.setState({score : this.state.score + 1}, function(){\n            console.log(this.state.score);\n          });\n          this.state.cards.sort(() => Math.random() - 0.5)\n          return true; \n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n\n                // Map over this.state.cards and render a cardCard component for each card object\n                render() {\n                    return (\n                        <Wrapper>\n                            <Header score={this.state.score} highscore={this.state.highscore}>Clicky Game</Header>\n                            {this.state.cards.map(card => (\n                                <Card\n                                    clickCount={this.clickCount}\n                                    id={card.id}\n                                    key={card.id}\n                                    image={card.image}\n                                />\n                            ))}\n                        </Wrapper>\n                    );\n                }\n            }\n\n            export default App;"]},"metadata":{},"sourceType":"module"}